# Nome do workflow, que aparecerá na aba "Actions" do repositório
name: CI/CD para Projeto Java com Maven e PostgreSQL

# Define os gatilhos que iniciam o workflow
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Agrupa todos os jobs
jobs:
  # Job 1: Build e Testes
  build-and-test:
    name: Build & Test com Java ${{ matrix.java-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        java-version: ['17', '21'] # Testa em múltiplas versões do Java

    # Inicia um serviço de banco de dados temporário para os testes
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: runner_user
          POSTGRES_PASSWORD: runner_password
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        # Garante que os testes só comecem quando o banco estiver pronto
        options: >-
          --health-cmd pg_isready 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Configurar JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'temurin'

      # Acelera o build restaurando dependências de execuções anteriores
      - name: Cache de dependências do Maven
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Roda os testes com banco PostgreSQL
      - name: Build e Testes com Maven
        run: mvn -B verify
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/testdb
          SPRING_DATASOURCE_USERNAME: runner_user
          SPRING_DATASOURCE_PASSWORD: runner_password

      # Empacota a aplicação em um JAR executável
      - name: Empacotar aplicação
        if: matrix.java-version == '17'
        run: mvn -B package -DskipTests

      # Salva o JAR como artefato para jobs futuros
      - name: Upload do Artefato JAR
        if: matrix.java-version == '17'
        uses: actions/upload-artifact@v4
        with:
          name: java-app-jar
          path: target/*.jar

  # Job 2: Construção e Publicação da Imagem Docker
  build-and-push-docker:
    name: Construir e Publicar Imagem Docker
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Download do Artefato JAR
        uses: actions/download-artifact@v4
        with:
          name: java-app-jar
          path: target/

      - name: Login no GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extrair metadados para Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}

      - name: Construir e enviar a imagem Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # Job 3: Deploy em Homologação (Staging)
  deploy-staging:
    name: Deploy em Homologação
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    environment:
      name: staging
      url: https://staging.gerenciador-tarefas.com

    steps:
      - name: Deploy para ambiente de Staging
        run: |
          echo "Iniciando deploy da imagem ghcr.io/${{ github.repository }}:latest para Staging..."
          # Aqui entraria o script real de deploy (ex: ssh, kubectl apply, etc.)
          echo "Deploy em Staging concluído!"

  # Job 4: Deploy em Produção
  deploy-production:
    name: Deploy em Produção
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment:
      name: production
      url: https://gerenciador-tarefas.com

    steps:
      - name: Deploy para ambiente de Produção
        run: |
          echo "Iniciando deploy da imagem ghcr.io/${{ github.repository }}:latest para Produção..."
          # O script real de deploy seria colocado aqui
          echo "Deploy em Produção concluído!"